


.. raw:: html

   <h1 align="center">

Python - Writing Your First Python Code!

.. raw:: html

   </h1>

Welcome!
========

By the end of this notebook, you will have learned the basics of Python,
including writing some basic commands, understanding object types, and
some simple operations!

Table of Contents
=================

.. raw:: html

   <div class="alert alert-block alert-info" style="margin-top: 20px">

.. raw:: html

   <li>

First Program in Python

.. raw:: html

   </li>

.. raw:: html

   <li>

Object Types

.. raw:: html

   </li>

.. raw:: html

   <li>

Expressions and Variables

.. raw:: html

   </li>

.. raw:: html

   <p>

.. raw:: html

   </p>

Estimated Time Needed: 25 min

.. raw:: html

   </div>

.. raw:: html

   <hr>

.. raw:: html

   <h2 align="center">

Your First Program in Python

.. raw:: html

   </h2>

A statement or expression is an instruction the computer will run or
execute. Perhaps the simplest program you can write is to print a
statement in Python.

.. raw:: html

   <div class="alert alert-success alertsuccess"
   style="margin-top: 20px">

**Tip**: To *execute* the Python code in the grey code cell below,
**click on it and press Shift + Enter**.

.. raw:: html

   </div>

.. code:: python

    print('Hello World!')

After executing the cell above, you should see that Python return the
string, ``Hello Python 101``. Congratulations on running your first
Python code!

.. raw:: html

   <div class="alert alert-success alertsuccess"
   style="margin-top: 20px">

**Tip:** **``print()``** is the **function** that you **executed**, and
you *passed in* an **argument** of ``'Hello World!'``.

.. raw:: html

   </div>

Python 3
~~~~~~~~

How do we know that Python 3 is running? Take a look in the top-right
hand corner of this notebook. You should see "Python 3"!

Writing comments in Python
~~~~~~~~~~~~~~~~~~~~~~~~~~

In addition to writing code, note that it is customary to comment your
code to help describe what it does. Not only does this help **other
people** understand your code, it can also serve as a *reminder* **to
you** of what your code does. (This is especially true when you write
some code and then come back to it weeks or months later.)

To write comments in your Python code, use the hash symbol (#) before
writing your comment. When you run the code Python will ignore
everything after the # in that line.

.. code:: python

    print('Hello Python 101') #this my comment
    #print('Hi')

Great! After executing the cell above, you should notice that **"this is
my comment** did not appeared in the output, because it was a comment
(and thus ignored by Python). The second line was also not executed
because ``print('Hi')`` was preceded by a hash symbol (#) as well!

Errors in Python
~~~~~~~~~~~~~~~~

Before continuing, it's important to note when things go wrong in
Python, and we cause **errors**.

There are many kinds of errors, and you **do not need to memorize the
various types of errors**. Instead, what's most important is know **what
the error messages mean**.

For example, if you spell **print** as **frint**, you will get an error
message.

.. code:: python

    frint("Hello World!")

The error message tells you (1) where the error occurred, and (2) what
kind of error it was. Here, Python attempted to run the function
``frint``, but could not determine what ``frint`` -- since it is
*undefined*.

Does Python know the error in the script before you run it?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

No, Python is naive! Python will try to run the code line-by-line, and
it will stop if it runs into an error.

.. code:: python

    print("This will be printed")
    frint("This will cause an error")
    print("This will NOT be printed")

More on errors later on in this course!

Exercise: Your First Program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using the ``print()`` function, print out the phrase: "hello world"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    # Write your code below and press Shift+Enter to execute 
    
    
    


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="1" class="collapse">

::

    print("hello world!")

.. raw:: html

   </div>

Print out the phrase: "Hello World" and comment it with the phrase "printing Hello World" *all in one line of code*
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    # Write your code below
    
    
    


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="2" class="collapse">

::

    print("Hello World") #print Hello World

.. raw:: html

   </div>

.. raw:: html

   <h2 align="center">

Types of objects in Python

.. raw:: html

   </h2>

You can have many different object types in Python, let's start with
**strings**, **integers** and **floats**. Anytime you write words (text)
in Python, you're using character **strings** (strings for short).
Numbers, on the other hand, depend: numbers can be **integers** (like
-1, 0, 100) or **floats**, which are real numbers (like 3.14, -42.0).



The following chart summarizes three data types for the last examples,
the first column indicates the expression the second column indicates
the data type

.. code:: python

    11 #integer

.. code:: python

    2.14 #float

.. code:: python

    "Hello Python 101" #character string

We can see the actual data type in python by using the **``type()``**
command

.. code:: python

    type(12)

.. code:: python

    type(2.14)

.. code:: python

    type("Hello Python 101")

Using the ``type()`` function, check the object type of ``12.0``?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    # Write your code below
    
    
    


Integers
~~~~~~~~

Here are some integers, integers can be negative or positive:



We can verify some of the above examples using the type command:

.. code:: python

    type(-1)

.. code:: python

    type(4)

.. code:: python

    type(0)

Floats
~~~~~~

Floats are real numbers; they include the integers but also "numbers
in-between the integers". Consider the numbers between 0 and one we can
select numbers in-between them, these numbers are floats. Similarly,
consider the numbers between 0.5 and 0.6. We can select numbers
in-between them, these are floats as well. We can continue the process,
zooming in for different numbers, of course, there is a limit, but it is
quite small.

We can verify some of the above examples using the type command:

.. code:: python

    type(1.0)

.. code:: python

    type(0.5)

.. code:: python

    type(0.56)

Converting from one object type to a different object type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can change the type of the object in Python; this is called
typecasting. For example, you can convert an integer into a float, as in
2 to 2.0.

.. code:: python

    type(2) #verify that this is an integer

Converting to float:
^^^^^^^^^^^^^^^^^^^^

.. code:: python

    float(2)

.. code:: python

    type(float(2))

Converting to integer:
^^^^^^^^^^^^^^^^^^^^^^

Nothing really changes. If you cast a float to an integer, you must be
careful. For example, if you cast the float 1.1 to 1 you will lose some
information :

.. code:: python

    int(1.1)

Converting from strings to integers/floats:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If a string contains an integer value, you can convert it to an integer:

.. code:: python

    int('1')

You can also convert strings containing float values into float objects

.. code:: python

    float('1.2')

However, if we attempt to convert a string that contains a non-numerical
value, we get an error:

.. code:: python

    int("A")

Converting to strings:
^^^^^^^^^^^^^^^^^^^^^^

You can convert an int to a string:

.. code:: python

    str(1)

You can convert a float to a string

.. code:: python

    str(1.2)

Boolean
~~~~~~~

Boolean is another important type in Python; a Boolean can take on two
values. The first value is true, just remember we use an uppercase T:

.. code:: python

    True

Boolean values can also be false, with an uppercase F:

.. code:: python

    False

Using the type command on a Boolean value we obtain the term bool, this
is short for Boolean

.. code:: python

    type(True)

.. code:: python

    type(False)

If we cast a Boolean true to an integer or float we will get a 1, if we
cast a Boolean false to an integer or float. If we get a zero if you
cast a 1 to a boolean, you get a true similarly, if you cast a 0 to a
Boolean you get a false.

.. code:: python

    int(True)

.. code:: python

    bool(1)

.. code:: python

    bool(0)

.. code:: python

    float(True)

Quiz on types
~~~~~~~~~~~~~

What is the type of the result of: ``6 / 2``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="3" class="collapse">

::

    the type if float 
    type(6/2)

.. raw:: html

   </div>

What is the type of the result of: ``6 // 2``? (Note the double slash //)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="4" class="collapse">

::

    int:
    double slashes stand for integer division 

.. raw:: html

   </div>

.. raw:: html

   <h2 align="center">

Expression and Variables

.. raw:: html

   </h2>

Expressions
~~~~~~~~~~~

Expressions are operations that Python performs. For example, basic
arithmetic operations like adding multiple numbers.

.. code:: python

    43 + 60 + 16 + 41

We can perform operations such as subtraction using the subtraction
sign. In this case the result is a negative number.

.. code:: python

    50 - 60

We can use multiplication using an asterisk:

.. code:: python

    5 * 5

We can also perform division with the forward slash

.. code:: python

    25 / 5

.. code:: python

    25 / 6

We can use the double slash for integer division, where the result is
rounded

.. code:: python

    25//5

.. code:: python

    25//6

**What is 160 min in hours?**


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="6" class="collapse">

::

    160.0 / 60.0

.. raw:: html

   </div>

Python follows mathematical conventions when performing mathematical
expressions. The following operations are in different order. In both
cases Python performs multiplication, then addition to obtain the final
result.

.. code:: python

     2 * 60 + 30

The expressions in the parentheses are performed first. We then multiply
the result by 60, the result is 1920.

.. code:: python

    (30 + 2) * 60

.. raw:: html

   <div class="alert alert-success alertsuccess"
   style="margin-top: 20px">

.. raw:: html

   <h4>

[Tip] Summary

.. raw:: html

   </h4>

.. raw:: html

   <p>

.. raw:: html

   </p>

You can do a variety of mathematical operations in Python including:

.. raw:: html

   <li>

addition: **2 + 2**

.. raw:: html

   </li>

.. raw:: html

   <li>

subtraction: **5 - 2**

.. raw:: html

   </li>

.. raw:: html

   <li>

multiplication: **3 \* 2**

.. raw:: html

   </li>

.. raw:: html

   <li>

division: **4 / 2**

.. raw:: html

   </li>

.. raw:: html

   <li>

exponentiation: **4 \*\* 2**

.. raw:: html

   </li>

.. raw:: html

   </div>

Variables
~~~~~~~~~

We can also **store** our output in **variables**, so we can use them
later on. For example:

.. code:: python

    x = 43 + 60 + 16 + 41

To return the value of **``x``**, we can simply run the variable as a
command:

.. code:: python

    x

We can also perform operations on **``x``** and save the result to a
**new variable**:

.. code:: python

    y = x / 60
    y

If we save something to an **existing variable**, it will **overwrite**
the previous value:

.. code:: python

    x = x / 60
    x

It's good practice to use **meaningful variable names**, so you don't
have to keep track of what variable is what:

.. code:: python

    total_min = (43 + 42 )
    total_min

.. code:: python

    total_hr = total_min / 60  
    total_hr

You can put this all into a single expression, but remember to use
**round brackets** to add together the album lengths first, before
dividing by 60.

.. code:: python

    total_hr = (43 + 42 + 57) / 60  # get total hours in a single expression
    total_hr

.. raw:: html

   <hr>

.. raw:: html

   </hr>

.. raw:: html

   <div class="alert alert-success alertsuccess"
   style="margin-top: 0px">

.. raw:: html

   <h4>

[Tip] Variables in Python

.. raw:: html

   </h4>

.. raw:: html

   <p>

.. raw:: html

   </p>

As you just learned, you can use **variables** to store values for
repeated use. Here are some more **characteristics of variables in
Python**:

.. raw:: html

   <li>

variables store the output of a block of code

.. raw:: html

   </li>

.. raw:: html

   <li>

variables are typically assigned using **=** (as in **x = 1**)

.. raw:: html

   </li>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   </div>

.. raw:: html

   <hr>

.. raw:: html

   </hr>

.. raw:: html

   <h2 align="center">

Quiz on Expression and Variables in Python

.. raw:: html

   </h2>

#### What is the value of x ?

.. raw:: html

   <p>

x = 3 + 2 \* 2

.. raw:: html

   </p>


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="SM1" class="collapse">

::

    7

.. raw:: html

   </div>

#### What is the value of y ?

.. raw:: html

   <p>

y = (3 + 2) \* 2

.. raw:: html

   </p>


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="SM2" class="collapse">

::

    10

.. raw:: html

   </div>

#### What is the value of z ?

.. raw:: html

   <p>

z = x + y

.. raw:: html

   </p>


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="SM3" class="collapse">

::

    17

.. raw:: html

   </div>




.. raw:: html

   <hr>

.. raw:: html

   </hr>

.. raw:: html

   <div class="alert alert-success alertsuccess"
   style="margin-top: 20px">

.. raw:: html

   <h4>

[Tip] Saving the Notebook

.. raw:: html

   </h4>

Your notebook saves automatically every two minutes. You can manually
save by going to **File** > **Save and Checkpoint**. You can come back
to this notebook anytime by clicking this notebook under the "**Recent
Notebooks**" list on the right-hand side.

.. raw:: html

   </div>

.. raw:: html

   <hr>

.. raw:: html

   </hr>

.. raw:: html

   <div class="alert alert-success alertsuccess"
   style="margin-top: 20px">

.. raw:: html

   <h4>

[Tip] Notebook Features

.. raw:: html

   </h4>

Did you know there are other **notebook options**? Click on the **>**
symbol to the left of the notebook:

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   </div>

.. raw:: html

   <hr>

.. raw:: html

   </hr>

.. raw:: html

   <hr>

Copyright © 2017 IBM Cognitive Class. This notebook and its source code
are released under the terms of the `MIT
License <https://cognitiveclass.ai/mit-license/>`__.

About the Authors:
~~~~~~~~~~~~~~~~~~

`Joseph
Santarcangelo <https://www.linkedin.com/in/joseph-s-50398b136/>`__ is a
Data Scientist at IBM, and holds a PhD in Electrical Engineering, his
research focused on using machine learning, signal processing, and
computer vision to determine how videos impact human cognition. Joseph
has been working for IBM since he completed his PhD.
